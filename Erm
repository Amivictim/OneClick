repeat task.wait() until game.Players.LocalPlayer.Character

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = game:GetService("Players").LocalPlayer
local playerGui = player.PlayerGui

local function triggerDialogueEvents()
    local argsDialogue1 = {
        [1] = "Interact",
        [2] = {
            [1] = "StarterUnitDialogue",
            [2] = 1,
            [3] = "Okay!"
        }
    }
    ReplicatedStorage.Networking.State.DialogueEvent:FireServer(unpack(argsDialogue1))
    wait(0.5)

    local argsDialogue2 = {
        [1] = "Interact",
        [2] = {
            [1] = "StarterUnitDialogue",
            [2] = 2,
            [3] = "Yeah!"
        }
    }
    ReplicatedStorage.Networking.State.DialogueEvent:FireServer(unpack(argsDialogue2))
    wait(0.5)
end

local function selectLuffy()
    local argsSelect = {
        [1] = "Select",
        [2] = "Luffo"
    }
    ReplicatedStorage.Networking.Units.UnitSelectionEvent:FireServer(unpack(argsSelect))
end

local function equipLuffy()
    local unitsFolder = playerGui.Windows.Units.Holder.Main.Units

    for _, unit in pairs(unitsFolder:GetChildren()) do
        if unit:FindFirstChild("Holder") and unit.Holder:FindFirstChild("Main") then
            local unitName = unit.Holder.Main.UnitName.Text
            if unitName == "Luffo" then
                local unitID = unit.Name

                local argsEquip = {
                    [1] = "Equip",
                    [2] = unitID
                }
                ReplicatedStorage.Networking.Units.EquipEvent:FireServer(unpack(argsEquip))
                
                wait(1)
                local equippedUnit = playerGui.HUD.Main.Units["1"].UnitTemplate.Holder.Main.UnitName.Text
                if equippedUnit == "Luffo" then
                    return true
                else
                    return false
                end
            end
        end
    end
    return false
end

local function claimTutorial()
    local args = {
        [1] = "ClaimTutorial",
        [2] = "PlayTutorial"
    }
    ReplicatedStorage.Networking.ClientListeners.TutorialEvent:FireServer(unpack(args))
end

local function setupLobby()
    local argsEnter = {
        [1] = "Enter",
        [2] = workspace.MainLobby.Lobby.Stories.Lobby
    }
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(argsEnter))
    wait(0.2)

    local argsConfirm = {
        [1] = "Confirm",
        [2] = {
            [1] = "Story",
            [2] = "Stage1",
            [3] = "Act1",
            [4] = "Normal",
            [5] = 4,
            [6] = 0,
            [7] = false
        }
    }
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(argsConfirm))
    wait(0.5)

    local startArgs = {
        [1] = "Start"
    }
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(startArgs))
end

local function automateGame()
    triggerDialogueEvents()
    wait(1)
    selectLuffy()
    wait(1)
    
    if equipLuffy() then
        claimTutorial()
        setupLobby()
    end
end

if game.PlaceId == 16146832113 then
    automateGame()
end

if game.PlaceId == 16277809958 then
    local function placeLuffo()
        local positions = {
            Vector3.new(146.41958618164062, 8.740113258361816, 119.6677017211914),
            Vector3.new(148.50436401367188, 8.740113258361816, 119.41595458984375),
            Vector3.new(150.35987854003906, 8.740114212036133, 119.38519287109375),
            Vector3.new(146.0250701904297, 8.740114212036133, 121.45707702636719),
            Vector3.new(147.76217651367188, 8.740114212036133, 121.37359619140625),
            Vector3.new(146.1141815185547, 8.740114212036133, 123.28225708007812)
        }

        for _, position in ipairs(positions) do
            local args = {
                [1] = "Render",
                [2] = {
                    [1] = "Luffo",
                    [2] = 39,
                    [3] = position,
                    [4] = 0
                }
            }
            game:GetService("ReplicatedStorage").Networking.UnitEvent:FireServer(unpack(args))
            wait(0.5)
        end
    end

    local function autoUpgradeUnits()
        local unitFolder = game:GetService("Workspace").Units

        for _, unit in pairs(unitFolder:GetChildren()) do
            local args = {
                [1] = "Upgrade",
                [2] = unit.Name
            }
            game:GetService("ReplicatedStorage").Networking.UnitEvent:FireServer(unpack(args))
            wait(0.5)
        end
    end

    local function skipWave()
        local args = {
            [1] = "Skip"
        }
        game:GetService("ReplicatedStorage").Networking.SkipWaveEvent:FireServer(unpack(args))
    end

    local function autoRetry()
        while true do
            local args = {
                [1] = "Retry"
            }
            game:GetService("ReplicatedStorage").Networking.EndScreen.VoteEvent:FireServer(unpack(args))
            wait(20)
        end
    end

    local function autoPlay()
        while true do
            placeLuffo()
            autoUpgradeUnits()
            skipWave()
            wait(2)
        end
    end

    coroutine.wrap(autoRetry)()
    autoPlay()
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local webhookUrl = "https://discord.com/api/webhooks/1228857321111814165/svRNyuMZW_IAtAIKZ-PtDWIxJmgEzv95Utjpb_z880w66LG74UylTo9pc-rYuuUhexYc"

function SendMessage(url, message)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["content"] = message
    }
    local body = http:JSONEncode(data)

    if syn then
        syn.request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    elseif http_request then
        http_request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    elseif request then
        request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    else
        print("HTTP Request fonksiyonu bulunamadı!")
    end
end

function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["embeds"] = {
            {
                ["title"] = embed.title,
                ["description"] = embed.description,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
                ["footer"] = {
                    ["text"] = embed.footer.text
                }
            }
        }
    }
    local body = http:JSONEncode(data)

    if syn then
        syn.request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    elseif http_request then
        http_request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    elseif request then
        request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    else
        print("HTTP Request fonksiyonu bulunamadı!")
    end
end

local function getPlayerData(player)
    local level = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("Hotbar") and player.PlayerGui.Hotbar.Main.Level.Level.Text or "N/A"
    local fps = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("HUD") and player.PlayerGui.HUD.Info.FPS.Amount.Text or "N/A"
    local playerName = player.Name
    return playerName, level, fps
end

local function sendPlayerDataWebhook()
    local player = Players.LocalPlayer
    local playerName, level, fps = getPlayerData(player)

    local embed = {
        ["title"] = "Kullanıcı Bilgileri",
        ["color"] = 3447003,
        ["fields"] = {
            {
                ["name"] = "Kullanıcı Adı",
                ["value"] = playerName
            },
            {
                ["name"] = "Seviye",
                ["value"] = level
            },
            {
                ["name"] = "FPS",
                ["value"] = fps
            }
        },
        ["footer"] = {
            ["text"] = ""
        }
    }

    SendMessageEMBED(webhookUrl, embed)
end

while true do
    sendPlayerDataWebhook()
    wait(120)
end

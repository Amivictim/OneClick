repeat task.wait() until game.Players.LocalPlayer.Character

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = game:GetService("Players").LocalPlayer
local playerGui = player.PlayerGui

local function triggerDialogueEvents()
    local argsDialogue1 = {"Interact", {"StarterUnitDialogue", 1, "Okay!"}}
    ReplicatedStorage.Networking.State.DialogueEvent:FireServer(unpack(argsDialogue1))
    wait(0.5)

    local argsDialogue2 = {"Interact", {"StarterUnitDialogue", 2, "Yeah!"}}
    ReplicatedStorage.Networking.State.DialogueEvent:FireServer(unpack(argsDialogue2))
    wait(0.5)
end

local function selectLuffy()
    local argsSelect = {"Select", "Luffo"}
    ReplicatedStorage.Networking.Units.UnitSelectionEvent:FireServer(unpack(argsSelect))
end

local function equipLuffy()
    local unitsFolder = playerGui.Windows.Units.Holder.Main.Units

    for _, unit in pairs(unitsFolder:GetChildren()) do
        if unit:FindFirstChild("Holder") and unit.Holder:FindFirstChild("Main") then
            local unitName = unit.Holder.Main.UnitName.Text
            if unitName == "Luffo" then
                local unitID = unit.Name
                local argsEquip = {"Equip", unitID}
                ReplicatedStorage.Networking.Units.EquipEvent:FireServer(unpack(argsEquip))

                wait(1)
                local equippedUnit = playerGui.HUD.Main.Units["1"].UnitTemplate.Holder.Main.UnitName.Text
                return equippedUnit == "Luffo"
            end
        end
    end
    return false
end

local function claimTutorial()
    local args = {"ClaimTutorial", "PlayTutorial"}
    ReplicatedStorage.Networking.ClientListeners.TutorialEvent:FireServer(unpack(args))
end

local function setupLobby()
    local argsEnter = {"Enter", workspace.MainLobby.Lobby.Stories.Lobby}
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(argsEnter))
    wait(0.2)

    local argsConfirm = {"Confirm", {"Story", "Stage1", "Act1", "Normal", 4, 0, false}}
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(argsConfirm))
    wait(0.5)

    local startArgs = {"Start"}
    ReplicatedStorage.Networking.LobbyEvent:FireServer(unpack(startArgs))
end

-- Automate the game processes
local function automateGame()
    triggerDialogueEvents()
    wait(1)
    selectLuffy()
    wait(1)

    if equipLuffy() then
        claimTutorial()
        setupLobby()
    end
end

if game.PlaceId == 16146832113 then
    automateGame()
end

if game.PlaceId == 16277809958 then
    local function placeLuffo()
        local positions = { -- positions list }
        for _, position in ipairs(positions) do
            local args = {"Render", {"Luffo", 39, position, 0}}
            ReplicatedStorage.Networking.UnitEvent:FireServer(unpack(args))
            wait(0.5)
        end
    end

    local function autoUpgradeUnits()
        for _, unit in pairs(workspace.Units:GetChildren()) do
            local args = {"Upgrade", unit.Name}
            ReplicatedStorage.Networking.UnitEvent:FireServer(unpack(args))
            wait(0.5)
        end
    end

    local function skipWave()
        local args = {"Skip"}
        ReplicatedStorage.Networking.SkipWaveEvent:FireServer(unpack(args))
    end

    local function autoRetry()
        while true do
            ReplicatedStorage.Networking.EndScreen.VoteEvent:FireServer({"Retry"})
            wait(20)
        end
    end

    local function autoPlay()
        while true do
            placeLuffo()
            autoUpgradeUnits()
            skipWave()
            wait(2)
        end
    end

    coroutine.wrap(autoRetry)()
    autoPlay()
end

-- Discord webhook thing
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local webhookUrl = "https://discord.com/api/webhooks/1228857321111814165/svRNyuMZW_IAtAIKZ-PtDWIxJmgEzv95Utjpb_z880w66LG74UylTo9pc-rYuuUhexYc"

function SendMessage(url, message)
    local headers = {["Content-Type"] = "application/json"}
    local data = {["content"] = message}
    local body = HttpService:JSONEncode(data)

    HttpService:RequestAsync({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

function SendMessageEMBED(url, embed)
    local headers = {["Content-Type"] = "application/json"}
    local data = {
        ["embeds"] = {
            {
                ["title"] = embed.title,
                ["description"] = embed.description,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
                ["footer"] = {["text"] = embed.footer.text}
            }
        }
    }
    local body = HttpService:JSONEncode(data)

    HttpService:RequestAsync({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

local function getPlayerData(player)
    local level = player.PlayerGui.Hotbar.Main.Level.Level.Text or "N/A"
    local fps = player.PlayerGui.HUD.Info.FPS.Amount.Text or "N/A"
    local playerName = player.Name
    return playerName, level, fps
end

local function sendPlayerDataWebhook()
    local playerName, level, fps = getPlayerData(Players.LocalPlayer)

    local embed = {
        ["title"] = "Player Data",
        ["color"] = 3447003,
        ["fields"] = {
            {["name"] = "Player Name", ["value"] = playerName},
            {["name"] = "Level", ["value"] = level},
            {["name"] = "FPS", ["value"] = fps}
        },
        ["footer"] = {["text"] = ""}
    }

    SendMessageEMBED(webhookUrl, embed)
end

-- Send player data every 10 minutes
while true do
    sendPlayerDataWebhook()
    wait(600)
end
